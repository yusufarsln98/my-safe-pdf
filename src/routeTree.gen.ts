/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SplitIndexImport } from './routes/split/index'
import { Route as MergeIndexImport } from './routes/merge/index'
import { Route as ArrangementIndexImport } from './routes/arrangement/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SplitIndexRoute = SplitIndexImport.update({
  id: '/split/',
  path: '/split/',
  getParentRoute: () => rootRoute,
} as any)

const MergeIndexRoute = MergeIndexImport.update({
  id: '/merge/',
  path: '/merge/',
  getParentRoute: () => rootRoute,
} as any)

const ArrangementIndexRoute = ArrangementIndexImport.update({
  id: '/arrangement/',
  path: '/arrangement/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/arrangement/': {
      id: '/arrangement/'
      path: '/arrangement'
      fullPath: '/arrangement'
      preLoaderRoute: typeof ArrangementIndexImport
      parentRoute: typeof rootRoute
    }
    '/merge/': {
      id: '/merge/'
      path: '/merge'
      fullPath: '/merge'
      preLoaderRoute: typeof MergeIndexImport
      parentRoute: typeof rootRoute
    }
    '/split/': {
      id: '/split/'
      path: '/split'
      fullPath: '/split'
      preLoaderRoute: typeof SplitIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/arrangement': typeof ArrangementIndexRoute
  '/merge': typeof MergeIndexRoute
  '/split': typeof SplitIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/arrangement': typeof ArrangementIndexRoute
  '/merge': typeof MergeIndexRoute
  '/split': typeof SplitIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/arrangement/': typeof ArrangementIndexRoute
  '/merge/': typeof MergeIndexRoute
  '/split/': typeof SplitIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/arrangement' | '/merge' | '/split'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/arrangement' | '/merge' | '/split'
  id: '__root__' | '/' | '/arrangement/' | '/merge/' | '/split/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ArrangementIndexRoute: typeof ArrangementIndexRoute
  MergeIndexRoute: typeof MergeIndexRoute
  SplitIndexRoute: typeof SplitIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ArrangementIndexRoute: ArrangementIndexRoute,
  MergeIndexRoute: MergeIndexRoute,
  SplitIndexRoute: SplitIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/arrangement/",
        "/merge/",
        "/split/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/arrangement/": {
      "filePath": "arrangement/index.tsx"
    },
    "/merge/": {
      "filePath": "merge/index.tsx"
    },
    "/split/": {
      "filePath": "split/index.ts"
    }
  }
}
ROUTE_MANIFEST_END */
